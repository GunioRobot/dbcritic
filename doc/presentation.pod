=head1 DBIx::Class::Schema::Critic

Mark Gardner I<E<lt>L<mjgardner@cpan.org|mailto:mjgardner@cpan.org>E<gt>>

G<The-Critic.jpg>

=head1 I love Perl::Critic

=over

=item *

makes sure I follow the same coding standards

=item *

catches potential maintenance problems and ambiguities

=item *

adjustable so I can bend the "rules" when I need to

=back


=head1 I hate databases

I<(specifically, relational database schemas)>

=over

=item *

a lot of details to get right when developing a schema

=item *

a lot of repetitive SQL to keep consistent

=item *

often thrown together by developers (like me) more focused on code

=back


=head1 Quick Demo

=for Bash
$ sqlite3 sample/demo.db .schema

=for text
CREATE TABLE person (name, title);

=for Bash
$ dbic_critic --dsn dbi:SQLite:sample/demo.db

=head1 Quick Demo Results

=for Bash
$ dbic_critic --dsn dbi:SQLite:sample/demo.db

=for text
[Table person] No primary key
Tables should have one or more columns defined as a primary key.
person has no primary key

G<Critic-Main-600x314.jpg>


=head1 What just happened?

=over

=item *

Connect to database

=item *

Turn database schema into Perl classes

=item *

Load plugins to process each type of class created

=item *

Loop over the classes, plugins report violations of a policy

=item *

(structure borrowed from Perl::Critic's processing of Perl documents)

=back


=head1 I Love CPAN

=over

=item C<DBIx::Class>

=item C<DBIx::Class::Schema::Loader>

=item C<Module::Pluggable>

=item C<Moo>

=back


=head1 Under the hood

=head2 Main classes

=over

=item C<Critic>

=item C<Critic::Loader>

=item C<Critic::Violation>

=back

=head2 Roles

=over

=item C<Critic::Policy>

=item C<Critic::PolicyType>

=back

I<(all under C<DBIx::Class::Schema::>)>

=head1 What is a policy?

=over

=item concept borrowed from Perl::Critic

=item in C<DBIx::Class::Schema::Critic::Policy::> namespace

=item has four methods

=over

=item C<description>:
returns a plain string

=item C<explanation>:
returns a plain string

=item C<applies_to>:
returns a reference to a list of things the policy criticizes

=item C<violates>:
returns a Violation object if the policy was violated

=back

=item That's it.

=back


=head1 What Is A Violation?

=over

=item concept borrowed from Perl::Critic

=item instance of C<DBIx::Class::Schema::Critic::Violation>

=item has C<description>, C<explanation> and C<element> attributes from a violated Policy

=item has a C<details> attribute for the specific issue found

=item stringifies for Critic reports

=back


=head1 Moo and Roles make it easier

=begin Perl

use Moo;
sub description {'Follow my policy'}
sub explanation {'My way or the highway!'}
sub violates {
    my $self = shift;
    my $schema = $self->schema;
    my $element = $self->element;
    return 'This policy always fails'; # becomes details of the Violation
}
# take care of applies_to and returning a Violation object
with 'DBIx::Class::Schema::Critic::PolicyType::ResultSource';

=end Perl

=head1 TODO

=over

=item *

Steal more ideas from Perl::Critic!

=over

=item Configure which policies run, severity levels, themes, etc.

=item Support configurable policies

=back

=item *

Make installable outside of CPAN toolchain for non-Perl programmers.

(I'm sure Ruby and PHP people have crappy databases too.)

=item *

MOAR POLICIES

(Have ideas? Pls submit on L<GitHub|http://github.com/mjgardner/DBIx-Class-Schema-Critic/issues> KTHX)

=back


=head1 Where To Get it

=over

=item Download

=over

=item CPAN: L<http://search.cpan.org/dist/DBIx-Class-Schema-Critic/>

=item MetaCPAN: L<http://metacpan.org/release/DBIx-Class-Schema-Critic/>

=back

=item Contribute ideas, policies and code

=over

=item GitHub: L<http://github.com/mjgardner/DBIx-Class-Schema-Critic>

=item I use Dist::Zilla, but the default branch doesn't need it.

=back

=back

=over

=item *

Questions?

=back
